{"version":3,"file":"static/js/700.29c5cbdb.chunk.js","mappings":"8JAUM,MAAOA,UACHC,EAAAA,GAKRC,WAAAA,GACEC,QAHe,KAAAC,YAAc,gBAAiBC,OA0CxC,KAAAC,wBAA0BC,UAChC,MACMC,EAAuC,CAC3CC,YAFmBC,KAAKC,yBAEXF,MAEfC,KAAKE,gBAAgB,0BAA2BJ,EAAY,EA3CxDE,KAAKN,aACPC,OAAOQ,YAAYC,iBACjB,SACAJ,KAAKJ,wBAGX,CAEO,UAAMS,CAAKC,GACXN,KAAKN,aACRM,KAAKO,8BAEDZ,OAAOQ,YAAYE,KAAKC,EAAQP,KACxC,CAEO,YAAMS,GACNR,KAAKN,aACRM,KAAKO,wBAEPZ,OAAOQ,YAAYK,QACrB,CAEO,2BAAMP,GAIX,OAHKD,KAAKN,aACRM,KAAKO,wBAECZ,OAAOQ,YAAYJ,MACzB,IAAK,oBACH,MAAO,CAAEA,KAAMU,EAAAA,EAAgBC,mBACjC,IAAK,sBACH,MAAO,CAAEX,KAAMU,EAAAA,EAAgBE,qBACjC,IAAK,qBACH,MAAO,CAAEZ,KAAMU,EAAAA,EAAgBG,oBACjC,QACE,MAAO,CAAEb,KAAMU,EAAAA,EAAgBI,kBAErC,CAUQN,qBAAAA,GACN,MAAMP,KAAKc,YACT,wDAEJ,E","sources":["../node_modules/@capawesome/capacitor-screen-orientation/src/web.ts"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\n\nimport type {\n  GetCurrentOrientationResult,\n  LockOptions,\n  ScreenOrientationChange,\n  ScreenOrientationPlugin,\n} from './definitions';\nimport { OrientationType } from './definitions';\n\nexport class ScreenOrientationWeb\n  extends WebPlugin\n  implements ScreenOrientationPlugin\n{\n  private readonly isSupported = 'orientation' in screen;\n\n  constructor() {\n    super();\n    if (this.isSupported) {\n      screen.orientation.addEventListener(\n        'change',\n        this.handleOrientationChange,\n      );\n    }\n  }\n\n  public async lock(options: LockOptions): Promise<void> {\n    if (!this.isSupported) {\n      this.throwUnsupportedError();\n    }\n    await screen.orientation.lock(options.type);\n  }\n\n  public async unlock(): Promise<void> {\n    if (!this.isSupported) {\n      this.throwUnsupportedError();\n    }\n    screen.orientation.unlock();\n  }\n\n  public async getCurrentOrientation(): Promise<GetCurrentOrientationResult> {\n    if (!this.isSupported) {\n      this.throwUnsupportedError();\n    }\n    switch (screen.orientation.type) {\n      case 'landscape-primary':\n        return { type: OrientationType.LANDSCAPE_PRIMARY };\n      case 'landscape-secondary':\n        return { type: OrientationType.LANDSCAPE_SECONDARY };\n      case 'portrait-secondary':\n        return { type: OrientationType.PORTRAIT_SECONDARY };\n      default:\n        return { type: OrientationType.PORTRAIT_PRIMARY };\n    }\n  }\n\n  private handleOrientationChange = async () => {\n    const result = await this.getCurrentOrientation();\n    const changeEvent: ScreenOrientationChange = {\n      type: result.type,\n    };\n    this.notifyListeners('screenOrientationChange', changeEvent);\n  };\n\n  private throwUnsupportedError(): never {\n    throw this.unavailable(\n      'Screen Orientation API not available in this browser.',\n    );\n  }\n}\n"],"names":["ScreenOrientationWeb","WebPlugin","constructor","super","isSupported","screen","handleOrientationChange","async","changeEvent","type","this","getCurrentOrientation","notifyListeners","orientation","addEventListener","lock","options","throwUnsupportedError","unlock","OrientationType","LANDSCAPE_PRIMARY","LANDSCAPE_SECONDARY","PORTRAIT_SECONDARY","PORTRAIT_PRIMARY","unavailable"],"sourceRoot":""}